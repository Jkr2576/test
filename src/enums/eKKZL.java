package enums;

/**
 * Коды категории работ
 * 
 * @since (K01..K16, K20, K21), (empty) - пустой, (error) - Ошибка;
 * @author Сахончик Д.В.
 */
public enum eKKZL {
	/**
	 * Работа по трудовому договору
	 */
	K01("Работа по трудовому договору"), //
	/**
	 * Работа на основе членства (участия) в юридических лицах
	 */
	K02("Работа на основе членства (участия) в юридических лицах"), //
	/**
	 * Работа по гражданско-правовому договору с юридическим лицом
	 */
	K03("Работа по гражданско-правовому договору с юридическим лицом"), //
	/**
	 * Безработные, выполняющие общественные работы
	 */
	K04("Безработные, выполняющие общественные работы"), //
	/**
	 * Осужденные к лишению свободы
	 */
	K05("Осужденные к лишению свободы"), //
	/**
	 * Не работающие по найму, получающие премии или иные выплаты
	 */
	K06("Не работающие по найму, получающие премии или иные выплаты"), //
	/**
	 * Государственные служащие
	 */
	K07("Государственные служащие"), //
	/**
	 * Неработающие инвалиды
	 */
	K08("Неработающие инвалиды"), //
	/**
	 * Получающие пособие по временной нетрудоспособности
	 */
	K09("Получающие пособие по временной нетрудоспособности"), //
	/**
	 * Индивидуальный предприниматель
	 */
	K10("Индивидуальный предприниматель"), //
	/**
	 * Работа по гражданско-правовому договору с физическим лицом
	 */
	K11("Работа по гражданско-правовому договору с физическим лицом"), //
	/**
	 * Творческий работник
	 */
	K12("Творческий работник"), //
	/**
	 * Частный нотариус
	 */
	K13("Частный нотариус"), //
	/**
	 * Физ. лицо, осуществляющее виды ремесленной деятельности по заявительному
	 * принципу
	 */
	K14(
			"Физ. лицо, осуществляющее виды ремесленной деятельности по заявительному принципу"), //
	/**
	 * Гражданин, работающий за пределами РБ
	 */
	K15("Гражданин, работающий за пределами РБ"), //
	/**
	 * Гражданин, работающий в предст-вах межд. организаций в РБ
	 */
	K16("Гражданин, работающий в предст-вах межд. организаций в РБ"), //
	/**
	 * Дипломатический работник за супругу (супруга)
	 */
	K20("Дипломатический работник за супругу (супруга)"), //
	/**
	 * Атташе (помощник) по вопросам обороны за супругу (супруга)
	 */
	K21("Атташе (помощник) по вопросам обороны за супругу (супруга)"), //
	/**
	 * Пустой
	 */
	empty(" "),
	/**
	 * Ошибка
	 */
	error("Ошибка");

	private String value;

	eKKZL(String arg) {
		value = arg;
	};

	@Override
	public String toString() {
		return value;
	}

	/**
	 * Получение массива реквизитов
	 * 
	 * @param arg
	 * @return eKKZL
	 */
	public static eKKZL getEnum(String arg) {
		int result;
		try {
			if (arg.equals(" "))
				result = Integer.MIN_VALUE;
			else
				if (arg.length() != 2) result = 0;
			else
				result = Integer.parseInt(arg);
		} catch (Exception e) {
			result = 0;
		}
		return getEnumFromString(result);
	}

	/**
	 * Получение массива реквизитов
	 * 
	 * @param arg
	 * @return eKKZL
	 */
	private static eKKZL getEnumFromString(int arg) {
		switch (arg) {
		case Integer.MIN_VALUE:
			return eKKZL.empty;
		case 1:
			return eKKZL.K01;
		case 2:
			return eKKZL.K02;
		case 3:
			return eKKZL.K03;
		case 4:
			return eKKZL.K04;
		case 5:
			return eKKZL.K05;
		case 6:
			return eKKZL.K06;
		case 7:
			return eKKZL.K07;
		case 8:
			return eKKZL.K08;
		case 9:
			return eKKZL.K09;
		case 10:
			return eKKZL.K10;
		case 11:
			return eKKZL.K11;
		case 12:
			return eKKZL.K12;
		case 13:
			return eKKZL.K13;
		case 14:
			return eKKZL.K14;
		case 15:
			return eKKZL.K15;
		case 16:
			return eKKZL.K16;
		case 20:
			return eKKZL.K20;
		case 21:
			return eKKZL.K21;
		default:
			return eKKZL.error;
		}
	}
	
}
